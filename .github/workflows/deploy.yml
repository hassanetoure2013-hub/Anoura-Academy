# actionlint: disable=expr
name: Deploy MGX

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # --- BUILD (commune à Netlify et Vercel) ---
      - name: Build application (Vite)
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Upload dist artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      # --- VERIFY VERCEL SECRETS ---
      - name: Verify Vercel secrets
        shell: bash
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          missing=0
          [ -z "$VERCEL_TOKEN" ] && echo "Missing VERCEL_TOKEN" && missing=1
          [ -z "$VERCEL_ORG_ID" ] && echo "Missing VERCEL_ORG_ID" && missing=1
          [ -z "$VERCEL_PROJECT_ID" ] && echo "Missing VERCEL_PROJECT_ID" && missing=1
          if [ $missing -ne 0 ]; then
            echo "Configure required Vercel secrets in repository settings."
            exit 1
          fi

      # --- VERCEL DIAGNOSTICS ---
      - name: Vercel scope diagnostics
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "Vercel diagnostics:"
          echo "  Provided org scope: $VERCEL_ORG_ID"
          npm i -g vercel
          echo "--- whoami ---"
          vercel whoami --token "$VERCEL_TOKEN" || true
          echo "--- teams ls (slugs) ---"
          vercel teams ls --token "$VERCEL_TOKEN" || true
          echo "--- projects ls (with scope) ---"
          vercel projects ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" || true

      # --- DEPLOY VERCEL (statique depuis dist/) ---
      - name: Deploy to Vercel (static dist)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}          # slug d'équipe
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}  # ID du projet
        run: |
          npm i -g vercel
          # Copie vercel.json dans dist pour que Vercel prenne les rewrites SPA lors du déploiement statique
          if [ -f "vercel.json" ]; then
            cp vercel.json dist/
          fi
          # Écrit .vercel/project.json pour lier le repo au bon projet/équipe
          vercel pull --yes --environment=production \
            --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" \
            --project "$VERCEL_PROJECT_ID"

          # Déploie le build Vite (dossier dist/) en production
          vercel deploy dist --prod \
            --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" \
            --project "$VERCEL_PROJECT_ID" \
            --yes
