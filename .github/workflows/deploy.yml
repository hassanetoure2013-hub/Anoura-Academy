# actionlint: disable=expr
name: Deploy MGX

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # --- BUILD (commune à Netlify et Vercel) ---
      - name: Build application (Vite)
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Upload dist artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      # --- PREFLIGHT: détecte quelles cibles sont configurées ---
      - name: Preflight deploy targets
        shell: bash
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          has_netlify=0
          has_vercel=0

          if [ -n "${NETLIFY_AUTH_TOKEN}" ] && [ -n "${NETLIFY_SITE_ID}" ]; then
            has_netlify=1
            echo "Netlify: OK (NETLIFY_SITE_ID présent)"
          else
            echo "Netlify: secrets manquants (NETLIFY_AUTH_TOKEN/NETLIFY_SITE_ID)"
          fi

          if [ -n "${VERCEL_TOKEN}" ] && [ -n "${VERCEL_ORG_ID}" ] && [ -n "${VERCEL_PROJECT_ID}" ]; then
            has_vercel=1
            echo "Vercel: OK (ORG/PROJECT configurés)"
          else
            echo "Vercel: secrets manquants (VERCEL_TOKEN/VERCEL_ORG_ID/VERCEL_PROJECT_ID)"
          fi

          if [ $has_netlify -eq 0 ] && [ $has_vercel -eq 0 ]; then
            echo "Aucune cible de déploiement configurée. Configurez Netlify ou Vercel via GitHub Secrets."
            exit 1
          fi

          echo "NETLIFY_ENABLED=$has_netlify" >> $GITHUB_ENV
          echo "VERCEL_ENABLED=$has_vercel" >> $GITHUB_ENV

      # --- DIAGNOSTICS VERCEL (aide à résoudre scope/token) ---
      - name: Vercel scope diagnostics
        if: ${{ env.VERCEL_ENABLED == '1' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "Vercel diagnostics:"
          echo "  Provided org scope: $VERCEL_ORG_ID"
          npm i -g vercel
          echo "--- whoami ---"
          vercel whoami --token "$VERCEL_TOKEN" || true
          echo "--- teams ls (slugs) ---"
          vercel teams ls --token "$VERCEL_TOKEN" || true
          echo "--- projects ls (with scope) ---"
          vercel projects ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" || true

      # --- DEPLOY NETLIFY (optionnel) ---
      - name: Deploy to Netlify
        if: ${{ env.NETLIFY_ENABLED == '1' }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          npm i -g netlify-cli
          netlify deploy --dir=dist --prod --auth "$NETLIFY_AUTH_TOKEN" --site "$NETLIFY_SITE_ID"

      # --- DEPLOY VERCEL (statique depuis dist/) ---
      - name: Deploy to Vercel (static dist)
        if: ${{ env.VERCEL_ENABLED == '1' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}          # slug d'équipe
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}  # ID du projet
        run: |
          npm i -g vercel
          # Écrit .vercel/project.json pour lier le repo au bon projet/équipe
          vercel pull --yes --environment=production \
            --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" \
            --project "$VERCEL_PROJECT_ID"

          # Déploie le build Vite (dossier dist/) en production
          vercel deploy dist --prod \
            --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" \
            --project "$VERCEL_PROJECT_ID" \
            --yes
